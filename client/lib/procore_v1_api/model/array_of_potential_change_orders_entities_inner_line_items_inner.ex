# NOTE: This file is auto generated by OpenAPI Generator 6.6.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule ProcoreV1API.Model.ArrayOfPotentialChangeOrdersEntitiesInnerLineItemsInner do
  @moduledoc """
  
  """

  @derive [Poison.Encoder]
  defstruct [
    :id,
    :position,
    :description,
    :quantity,
    :uom,
    :total_amount,
    :extended_amount,
    :cost_code_id,
    :tax_code_id,
    :unit_cost,
    :cost_code,
    :line_item_type,
    :markup_line_items,
    :currency_configuration
  ]

  @type t :: %__MODULE__{
    :id => integer() | nil,
    :position => integer() | nil,
    :description => String.t | nil,
    :quantity => float() | nil,
    :uom => String.t | nil,
    :total_amount => String.t | nil,
    :extended_amount => String.t | nil,
    :cost_code_id => integer() | nil,
    :tax_code_id => integer() | nil,
    :unit_cost => float() | nil,
    :cost_code => ProcoreV1API.Model.RestV10WorkOrderContractsPost201ResponseLineItemsInnerCostCode.t | nil,
    :line_item_type => ProcoreV1API.Model.LineItemType.t | nil,
    :markup_line_items => [ProcoreV1API.Model.ArrayOfPotentialChangeOrdersEntitiesInnerLineItemsInnerMarkupLineItemsInner.t] | nil,
    :currency_configuration => ProcoreV1API.Model.RestV10WorkOrderContractsGet200ResponseInnerCurrencyConfiguration.t | nil
  }
end

defimpl Poison.Decoder, for: ProcoreV1API.Model.ArrayOfPotentialChangeOrdersEntitiesInnerLineItemsInner do
  import ProcoreV1API.Deserializer
  def decode(value, options) do
    value
    |> deserialize(:cost_code, :struct, ProcoreV1API.Model.RestV10WorkOrderContractsPost201ResponseLineItemsInnerCostCode, options)
    |> deserialize(:line_item_type, :struct, ProcoreV1API.Model.LineItemType, options)
    |> deserialize(:markup_line_items, :list, ProcoreV1API.Model.ArrayOfPotentialChangeOrdersEntitiesInnerLineItemsInnerMarkupLineItemsInner, options)
    |> deserialize(:currency_configuration, :struct, ProcoreV1API.Model.RestV10WorkOrderContractsGet200ResponseInnerCurrencyConfiguration, options)
  end
end

