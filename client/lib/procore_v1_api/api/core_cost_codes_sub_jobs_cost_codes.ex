# NOTE: This file is auto generated by OpenAPI Generator 6.6.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule ProcoreV1API.Api.CoreCostCodesSubJobsCostCodes do
  @moduledoc """
  API calls for all endpoints tagged `CoreCostCodesSubJobsCostCodes`.
  """

  alias ProcoreV1API.Connection
  import ProcoreV1API.RequestBuilder

  @doc """
  Copy from Standard Cost Code List
  Copy Cost Codes from Standard Cost Code List.

  ### Parameters

  - `connection` (ProcoreV1API.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `body90` (Body90): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%RestV10ProjectsProjectIdTimesheetsScopedCostCodesGet200ResponseInner{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_cost_codes_copy_from_standard_list_post(Tesla.Env.client, integer(), ProcoreV1API.Model.Body90.t, keyword()) :: {:ok, ProcoreV1API.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t} | {:ok, list(ProcoreV1API.Model.RestV10ProjectsProjectIdTimesheetsScopedCostCodesGet200ResponseInner.t)} | {:error, Tesla.Env.t}
  def rest_v10_cost_codes_copy_from_standard_list_post(connection, procore_company_id, body90, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/rest/v1.0/cost_codes/copy_from_standard_list")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_param(:body, :body, body90)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {201, [%ProcoreV1API.Model.RestV10ProjectsProjectIdTimesheetsScopedCostCodesGet200ResponseInner{}]},
      {400, %ProcoreV1API.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response{}},
      {401, %ProcoreV1API.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response{}},
      {403, %ProcoreV1API.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response{}},
      {:default, %ProcoreV1API.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response{}}
    ])
  end

  @doc """
  Copy Subset from Standard Cost Code List
  Copy a subset of Cost Codes from Standard Cost Code List.

  ### Parameters

  - `connection` (ProcoreV1API.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `opts` (keyword): Optional parameters
    - `:body` (RestV10CostCodesCopySubsetFromStandardListPostRequest): 

  ### Returns

  - `{:ok, ProcoreV1API.Model.RestV10CostCodesCopySubsetFromStandardListPost201Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_cost_codes_copy_subset_from_standard_list_post(Tesla.Env.client, integer(), keyword()) :: {:ok, ProcoreV1API.Model.RestV10CostCodesCopySubsetFromStandardListPost207Response.t} | {:ok, ProcoreV1API.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t} | {:ok, ProcoreV1API.Model.RestV10CostCodesCopySubsetFromStandardListPost201Response.t} | {:error, Tesla.Env.t}
  def rest_v10_cost_codes_copy_subset_from_standard_list_post(connection, procore_company_id, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    request =
      %{}
      |> method(:post)
      |> url("/rest/v1.0/cost_codes/copy_subset_from_standard_list")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {201, %ProcoreV1API.Model.RestV10CostCodesCopySubsetFromStandardListPost201Response{}},
      {207, %ProcoreV1API.Model.RestV10CostCodesCopySubsetFromStandardListPost207Response{}},
      {400, %ProcoreV1API.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response{}},
      {401, %ProcoreV1API.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response{}},
      {403, %ProcoreV1API.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response{}}
    ])
  end

  @doc """
  List Cost Codes
  Returns a list of Cost Codes.

  ### Parameters

  - `connection` (ProcoreV1API.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `project_id` (integer()): Unique identifier for the project.
  - `opts` (keyword): Optional parameters
    - `:sub_job_id` (integer()): Unique identifier for the Sub Job
    - `:page` (integer()): Page
    - `:per_page` (integer()): Elements per page
    - `:"filters[origin_id]"` (String.t): Origin ID. Returns item(s) with the specified Origin ID.
    - `:view` (String.t): Specifies which view (which attributes) of the resource is going to be present in the response.

  ### Returns

  - `{:ok, [%RestV10ProjectsProjectIdTimesheetsScopedCostCodesGet200ResponseInner{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_cost_codes_get(Tesla.Env.client, integer(), integer(), keyword()) :: {:ok, ProcoreV1API.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t} | {:ok, list(ProcoreV1API.Model.RestV10ProjectsProjectIdTimesheetsScopedCostCodesGet200ResponseInner.t)} | {:error, Tesla.Env.t}
  def rest_v10_cost_codes_get(connection, procore_company_id, project_id, opts \\ []) do
    optional_params = %{
      :sub_job_id => :query,
      :page => :query,
      :per_page => :query,
      :"filters[origin_id]" => :query,
      :view => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/rest/v1.0/cost_codes")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_param(:query, :project_id, project_id)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%ProcoreV1API.Model.RestV10ProjectsProjectIdTimesheetsScopedCostCodesGet200ResponseInner{}]},
      {401, %ProcoreV1API.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response{}},
      {403, %ProcoreV1API.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response{}},
      {:default, %ProcoreV1API.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response{}}
    ])
  end

  @doc """
  Show Cost Code
  Returns details on a specific Cost Code.

  ### Parameters

  - `connection` (ProcoreV1API.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `id` (integer()): Unique identifier for the Cost Code
  - `project_id` (integer()): Unique identifier for the project.
  - `opts` (keyword): Optional parameters
    - `:sub_job_id` (integer()): Unique identifier for the Sub Job

  ### Returns

  - `{:ok, ProcoreV1API.Model.Extended.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_cost_codes_id_get(Tesla.Env.client, integer(), integer(), integer(), keyword()) :: {:ok, ProcoreV1API.Model.Extended.t} | {:ok, ProcoreV1API.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t} | {:error, Tesla.Env.t}
  def rest_v10_cost_codes_id_get(connection, procore_company_id, id, project_id, opts \\ []) do
    optional_params = %{
      :sub_job_id => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/rest/v1.0/cost_codes/#{id}")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_param(:query, :project_id, project_id)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %ProcoreV1API.Model.Extended{}},
      {401, %ProcoreV1API.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response{}},
      {403, %ProcoreV1API.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response{}},
      {:default, %ProcoreV1API.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response{}}
    ])
  end

  @doc """
  Update Cost Code
  Update a specific Cost Code.

  ### Parameters

  - `connection` (ProcoreV1API.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `id` (integer()): Unique identifier for the Cost Code
  - `body89` (Body89): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, ProcoreV1API.Model.Extended.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_cost_codes_id_patch(Tesla.Env.client, integer(), integer(), ProcoreV1API.Model.Body89.t, keyword()) :: {:ok, ProcoreV1API.Model.Extended.t} | {:ok, ProcoreV1API.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t} | {:error, Tesla.Env.t}
  def rest_v10_cost_codes_id_patch(connection, procore_company_id, id, body89, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/rest/v1.0/cost_codes/#{id}")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_param(:body, :body, body89)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %ProcoreV1API.Model.Extended{}},
      {400, %ProcoreV1API.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response{}},
      {401, %ProcoreV1API.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response{}},
      {403, %ProcoreV1API.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response{}},
      {:default, %ProcoreV1API.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response{}}
    ])
  end

  @doc """
  Create Cost Code
  Create a new Cost Code.

  ### Parameters

  - `connection` (ProcoreV1API.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `body89` (Body89): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, ProcoreV1API.Model.Extended.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_cost_codes_post(Tesla.Env.client, integer(), ProcoreV1API.Model.Body89.t, keyword()) :: {:ok, ProcoreV1API.Model.Extended.t} | {:ok, ProcoreV1API.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t} | {:error, Tesla.Env.t}
  def rest_v10_cost_codes_post(connection, procore_company_id, body89, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/rest/v1.0/cost_codes")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_param(:body, :body, body89)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {201, %ProcoreV1API.Model.Extended{}},
      {400, %ProcoreV1API.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response{}},
      {401, %ProcoreV1API.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response{}},
      {403, %ProcoreV1API.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response{}},
      {:default, %ProcoreV1API.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response{}}
    ])
  end

  @doc """
  Sync Cost Codes
  This endpoint creates or updates a batch of Cost Codes. See [Using Sync Actions](/documentation/using-sync-actions) for additional information.

  ### Parameters

  - `connection` (ProcoreV1API.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `project_id` (integer()): Unique identifier for the project.
  - `cost_code_sync_body` (CostCodeSyncBody): 
  - `opts` (keyword): Optional parameters
    - `:sub_job_id` (integer()): Unique identifier for the Sub Job

  ### Returns

  - `{:ok, ProcoreV1API.Model.ArrayOfCostCodes.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_cost_codes_sync_patch(Tesla.Env.client, integer(), integer(), ProcoreV1API.Model.CostCodeSyncBody.t, keyword()) :: {:ok, ProcoreV1API.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t} | {:ok, ProcoreV1API.Model.ArrayOfCostCodes.t} | {:error, Tesla.Env.t}
  def rest_v10_cost_codes_sync_patch(connection, procore_company_id, project_id, cost_code_sync_body, opts \\ []) do
    optional_params = %{
      :sub_job_id => :query
    }

    request =
      %{}
      |> method(:patch)
      |> url("/rest/v1.0/cost_codes/sync")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_param(:query, :project_id, project_id)
      |> add_param(:body, :body, cost_code_sync_body)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %ProcoreV1API.Model.ArrayOfCostCodes{}},
      {400, %ProcoreV1API.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response{}},
      {401, %ProcoreV1API.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response{}},
      {403, %ProcoreV1API.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response{}},
      {:default, %ProcoreV1API.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response{}}
    ])
  end

  @doc """
  List Standard Cost Code Lists
  Return a list of all Standard Cost Code Lists at the Company level. Deprecation Note: Please find the replacement endpoint in the Work Breakdown Structure documents. This endpoint will be replaced with the List Company WBS Segment Item Lists Endpoint.

  ### Parameters

  - `connection` (ProcoreV1API.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `company_id` (integer()): Unique identifier for the company.
  - `opts` (keyword): Optional parameters
    - `:page` (integer()): Page
    - `:per_page` (integer()): Elements per page

  ### Returns

  - `{:ok, [%StandardCostCodeList{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_standard_cost_code_lists_get(Tesla.Env.client, integer(), integer(), keyword()) :: {:ok, list(ProcoreV1API.Model.StandardCostCodeList.t)} | {:ok, ProcoreV1API.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t} | {:error, Tesla.Env.t}
  def rest_v10_standard_cost_code_lists_get(connection, procore_company_id, company_id, opts \\ []) do
    optional_params = %{
      :page => :query,
      :per_page => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/rest/v1.0/standard_cost_code_lists")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_param(:query, :company_id, company_id)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%ProcoreV1API.Model.StandardCostCodeList{}]},
      {401, %ProcoreV1API.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response{}},
      {403, %ProcoreV1API.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response{}},
      {:default, %ProcoreV1API.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response{}}
    ])
  end

  @doc """
  Show Standard Cost Code List
  Return detailed information on a Standard Cost Code List at the Company level.

  ### Parameters

  - `connection` (ProcoreV1API.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `id` (integer()): Unique identifier for the Standard Cost Code
  - `company_id` (integer()): Unique identifier for the company.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, ProcoreV1API.Model.StandardCostCodeList2.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_standard_cost_code_lists_id_get(Tesla.Env.client, integer(), integer(), integer(), keyword()) :: {:ok, ProcoreV1API.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t} | {:ok, ProcoreV1API.Model.StandardCostCodeList2.t} | {:error, Tesla.Env.t}
  def rest_v10_standard_cost_code_lists_id_get(connection, procore_company_id, id, company_id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/rest/v1.0/standard_cost_code_lists/#{id}")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_param(:query, :company_id, company_id)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %ProcoreV1API.Model.StandardCostCodeList2{}},
      {401, %ProcoreV1API.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response{}},
      {403, %ProcoreV1API.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response{}},
      {:default, %ProcoreV1API.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response{}}
    ])
  end

  @doc """
  Update Standard Cost Code List
  Update a Standard Cost Code List at the Company level.

  ### Parameters

  - `connection` (ProcoreV1API.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `id` (integer()): Unique identifier for the Standard Cost Code
  - `body92` (Body92): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, ProcoreV1API.Model.StandardCostCodeList3.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_standard_cost_code_lists_id_patch(Tesla.Env.client, integer(), integer(), ProcoreV1API.Model.Body92.t, keyword()) :: {:ok, ProcoreV1API.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t} | {:ok, ProcoreV1API.Model.StandardCostCodeList3.t} | {:error, Tesla.Env.t}
  def rest_v10_standard_cost_code_lists_id_patch(connection, procore_company_id, id, body92, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/rest/v1.0/standard_cost_code_lists/#{id}")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_param(:body, :body, body92)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %ProcoreV1API.Model.StandardCostCodeList3{}},
      {401, %ProcoreV1API.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response{}},
      {403, %ProcoreV1API.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response{}},
      {404, %ProcoreV1API.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response{}},
      {:default, %ProcoreV1API.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response{}}
    ])
  end

  @doc """
  Create Standard Cost Code List
  Create a new Standard Cost Code List at the Company level.

  ### Parameters

  - `connection` (ProcoreV1API.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `body91` (Body91): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, ProcoreV1API.Model.StandardCostCodeList2.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_standard_cost_code_lists_post(Tesla.Env.client, integer(), ProcoreV1API.Model.Body91.t, keyword()) :: {:ok, ProcoreV1API.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t} | {:ok, ProcoreV1API.Model.StandardCostCodeList2.t} | {:error, Tesla.Env.t}
  def rest_v10_standard_cost_code_lists_post(connection, procore_company_id, body91, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/rest/v1.0/standard_cost_code_lists")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_param(:body, :body, body91)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {201, %ProcoreV1API.Model.StandardCostCodeList2{}},
      {400, %ProcoreV1API.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response{}},
      {401, %ProcoreV1API.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response{}},
      {403, %ProcoreV1API.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response{}},
      {:default, %ProcoreV1API.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response{}}
    ])
  end

  @doc """
  List Standard Cost Codes
  Return a list of all Standard Cost Codes in a specified Standard Cost Code list.

  ### Parameters

  - `connection` (ProcoreV1API.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `company_id` (integer()): Unique identifier for the company.
  - `standard_cost_code_list_id` (integer()): Standard Cost Code List ID
  - `opts` (keyword): Optional parameters
    - `:page` (integer()): Page
    - `:per_page` (integer()): Elements per page
    - `:"filters[origin_id]"` (String.t): Origin ID. Returns item(s) with the specified Origin ID.
    - `:view` (String.t): The 'default' view only returns id and standard_cost_code_list_id. The 'compact' view also includes origin_id. The 'extended' view includes the more complete list of attributes shown below. The 'extended' view is used when no value is passed in for this parameter.

  ### Returns

  - `{:ok, [%StandardCostCode{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_standard_cost_codes_get(Tesla.Env.client, integer(), integer(), integer(), keyword()) :: {:ok, list(ProcoreV1API.Model.StandardCostCode.t)} | {:ok, ProcoreV1API.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t} | {:error, Tesla.Env.t}
  def rest_v10_standard_cost_codes_get(connection, procore_company_id, company_id, standard_cost_code_list_id, opts \\ []) do
    optional_params = %{
      :page => :query,
      :per_page => :query,
      :"filters[origin_id]" => :query,
      :view => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/rest/v1.0/standard_cost_codes")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_param(:query, :company_id, company_id)
      |> add_param(:query, :standard_cost_code_list_id, standard_cost_code_list_id)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%ProcoreV1API.Model.StandardCostCode{}]},
      {401, %ProcoreV1API.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response{}},
      {403, %ProcoreV1API.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response{}},
      {:default, %ProcoreV1API.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response{}}
    ])
  end

  @doc """
  Delete Standard Cost Code
  Delete a Standard Cost Code for ERP integrated companies and standard cost code lists. Deprecation Note: Please find the replacement endpoint in the Work Breakdown Structure documents. This endpoint will be replaced with the Delete Company Segment Item Endpoint.

  ### Parameters

  - `connection` (ProcoreV1API.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `id` (integer()): ID
  - `company_id` (integer()): Unique identifier for the company.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, ProcoreV1API.Model.StandardCostCode.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_standard_cost_codes_id_delete(Tesla.Env.client, integer(), integer(), integer(), keyword()) :: {:ok, ProcoreV1API.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t} | {:ok, ProcoreV1API.Model.StandardCostCode.t} | {:error, Tesla.Env.t}
  def rest_v10_standard_cost_codes_id_delete(connection, procore_company_id, id, company_id, _opts \\ []) do
    request =
      %{}
      |> method(:delete)
      |> url("/rest/v1.0/standard_cost_codes/#{id}")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_param(:query, :company_id, company_id)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %ProcoreV1API.Model.StandardCostCode{}},
      {401, %ProcoreV1API.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response{}},
      {403, %ProcoreV1API.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response{}},
      {404, %ProcoreV1API.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response{}},
      {:default, %ProcoreV1API.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response{}}
    ])
  end

  @doc """
  Show Standard Cost Code
  Return information about a Standard Cost Code from a specified Standard Cost Code list.

  ### Parameters

  - `connection` (ProcoreV1API.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `id` (integer()): ID
  - `company_id` (integer()): Unique identifier for the company.
  - `standard_cost_code_list_id` (integer()): The ID of the Standard Cost Code List
  - `opts` (keyword): Optional parameters
    - `:view` (String.t): The 'default' view only returns id and standard_cost_code_list_id. The 'compact' view also includes origin_id. The 'extended' view includes the more complete list of attributes shown below. The 'extended' view is used when no value is passed in for this parameter.

  ### Returns

  - `{:ok, ProcoreV1API.Model.StandardCostCode.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_standard_cost_codes_id_get(Tesla.Env.client, integer(), integer(), integer(), integer(), keyword()) :: {:ok, ProcoreV1API.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t} | {:ok, ProcoreV1API.Model.StandardCostCode.t} | {:error, Tesla.Env.t}
  def rest_v10_standard_cost_codes_id_get(connection, procore_company_id, id, company_id, standard_cost_code_list_id, opts \\ []) do
    optional_params = %{
      :view => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/rest/v1.0/standard_cost_codes/#{id}")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_param(:query, :company_id, company_id)
      |> add_param(:query, :standard_cost_code_list_id, standard_cost_code_list_id)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %ProcoreV1API.Model.StandardCostCode{}},
      {401, %ProcoreV1API.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response{}},
      {403, %ProcoreV1API.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response{}},
      {:default, %ProcoreV1API.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response{}}
    ])
  end

  @doc """
  Update Standard Cost Code
  Update a Standard Cost Code.

  ### Parameters

  - `connection` (ProcoreV1API.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `id` (integer()): ID
  - `body94` (Body94): 
  - `opts` (keyword): Optional parameters
    - `:view` (String.t): The 'default' view only returns id and standard_cost_code_list_id. The 'compact' view also includes origin_id. The 'extended' view includes the more complete list of attributes shown below. The 'extended' view is used when no value is passed in for this parameter.

  ### Returns

  - `{:ok, ProcoreV1API.Model.StandardCostCode.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_standard_cost_codes_id_patch(Tesla.Env.client, integer(), integer(), ProcoreV1API.Model.Body94.t, keyword()) :: {:ok, ProcoreV1API.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t} | {:ok, ProcoreV1API.Model.StandardCostCode.t} | {:error, Tesla.Env.t}
  def rest_v10_standard_cost_codes_id_patch(connection, procore_company_id, id, body94, opts \\ []) do
    optional_params = %{
      :view => :query
    }

    request =
      %{}
      |> method(:patch)
      |> url("/rest/v1.0/standard_cost_codes/#{id}")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_param(:body, :body, body94)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %ProcoreV1API.Model.StandardCostCode{}},
      {400, %ProcoreV1API.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response{}},
      {401, %ProcoreV1API.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response{}},
      {403, %ProcoreV1API.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response{}},
      {:default, %ProcoreV1API.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response{}}
    ])
  end

  @doc """
  Create Standard Cost Code
  Create a new Standard Cost Code.

  ### Parameters

  - `connection` (ProcoreV1API.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `body93` (Body93): 
  - `opts` (keyword): Optional parameters
    - `:view` (String.t): The 'default' view only returns id and standard_cost_code_list_id. The 'compact' view also includes origin_id. The 'extended' view includes the more complete list of attributes shown below. The 'extended' view is used when no value is passed in for this parameter.

  ### Returns

  - `{:ok, ProcoreV1API.Model.StandardCostCode.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_standard_cost_codes_post(Tesla.Env.client, integer(), ProcoreV1API.Model.Body93.t, keyword()) :: {:ok, ProcoreV1API.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t} | {:ok, ProcoreV1API.Model.StandardCostCode.t} | {:error, Tesla.Env.t}
  def rest_v10_standard_cost_codes_post(connection, procore_company_id, body93, opts \\ []) do
    optional_params = %{
      :view => :query
    }

    request =
      %{}
      |> method(:post)
      |> url("/rest/v1.0/standard_cost_codes")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_param(:body, :body, body93)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {201, %ProcoreV1API.Model.StandardCostCode{}},
      {401, %ProcoreV1API.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response{}},
      {403, %ProcoreV1API.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response{}},
      {422, %ProcoreV1API.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response{}},
      {:default, %ProcoreV1API.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response{}}
    ])
  end

  @doc """
  Sync Standard Cost Codes
  This endpoint creates or updates a batch of Standard Cost Codes. See [Using Sync Actions](/documentation/using-sync-actions) for additional information.

  ### Parameters

  - `connection` (ProcoreV1API.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `standard_cost_code_sync_body` (StandardCostCodeSyncBody): 
  - `opts` (keyword): Optional parameters
    - `:view` (String.t): The 'default' view only returns id and standard_cost_code_list_id. The 'compact' view also includes origin_id. The 'extended' view includes the more complete list of attributes shown below. The 'extended' view is used when no value is passed in for this parameter.

  ### Returns

  - `{:ok, ProcoreV1API.Model.RestV10StandardCostCodesSyncPatch200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_standard_cost_codes_sync_patch(Tesla.Env.client, integer(), ProcoreV1API.Model.StandardCostCodeSyncBody.t, keyword()) :: {:ok, ProcoreV1API.Model.RestV10StandardCostCodesSyncPatch200Response.t} | {:ok, ProcoreV1API.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t} | {:error, Tesla.Env.t}
  def rest_v10_standard_cost_codes_sync_patch(connection, procore_company_id, standard_cost_code_sync_body, opts \\ []) do
    optional_params = %{
      :view => :query
    }

    request =
      %{}
      |> method(:patch)
      |> url("/rest/v1.0/standard_cost_codes/sync")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_param(:body, :body, standard_cost_code_sync_body)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %ProcoreV1API.Model.RestV10StandardCostCodesSyncPatch200Response{}},
      {401, %ProcoreV1API.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response{}},
      {403, %ProcoreV1API.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response{}},
      {413, %ProcoreV1API.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response{}}
    ])
  end
end
