# NOTE: This file is auto generated by OpenAPI Generator 6.6.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule ProcoreV1API.Api.FieldProductivityManagedEquipmentCompanyManagedEquipmentMaintenanceLogAttachment do
  @moduledoc """
  API calls for all endpoints tagged `FieldProductivityManagedEquipmentCompanyManagedEquipmentMaintenanceLogAttachment`.
  """

  alias ProcoreV1API.Connection
  import ProcoreV1API.RequestBuilder

  @doc """
  Delete Managed Equipment Maintenance Log Attachment
  Deleting an attachment from a Managed Equipment Maintenance Log

  ### Parameters

  - `connection` (ProcoreV1API.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `attachment_id` (integer()): ID of the managed equipment maintenance log attachment
  - `company_id` (integer()): Unique identifier for the company.
  - `id` (integer()): ID of the Managed Equipment Maintenance Log Attachment
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, ProcoreV1API.Model.ManagedEquipmentMaintenanceLogsAttachment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_companies_company_id_managed_equipment_maintenance_logs_id_attachments_attachment_id_delete(Tesla.Env.client, integer(), integer(), integer(), integer(), keyword()) :: {:ok, ProcoreV1API.Model.ManagedEquipmentMaintenanceLogsAttachment.t} | {:ok, ProcoreV1API.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t} | {:error, Tesla.Env.t}
  def rest_v10_companies_company_id_managed_equipment_maintenance_logs_id_attachments_attachment_id_delete(connection, procore_company_id, attachment_id, company_id, id, _opts \\ []) do
    request =
      %{}
      |> method(:delete)
      |> url("/rest/v1.0/companies/#{company_id}/managed_equipment_maintenance_logs/#{id}/attachments/#{attachment_id}")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %ProcoreV1API.Model.ManagedEquipmentMaintenanceLogsAttachment{}},
      {403, %ProcoreV1API.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response{}},
      {404, %ProcoreV1API.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response{}}
    ])
  end

  @doc """
  Show an individual managed equipment maintenance log attachment
  Return detailed information about a specific managed equipment maintenance log attachment

  ### Parameters

  - `connection` (ProcoreV1API.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `company_id` (integer()): Unique identifier for the company.
  - `id` (integer()): ID of the managed equipment maintenance log to get attachments from
  - `attachment_id` (integer()): ID of the managed equipment maintenance log attachment
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, ProcoreV1API.Model.ManagedEquipmentMaintenanceLogsAttachment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_companies_company_id_managed_equipment_maintenance_logs_id_attachments_attachment_id_get(Tesla.Env.client, integer(), integer(), integer(), integer(), keyword()) :: {:ok, ProcoreV1API.Model.ManagedEquipmentMaintenanceLogsAttachment.t} | {:ok, ProcoreV1API.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t} | {:error, Tesla.Env.t}
  def rest_v10_companies_company_id_managed_equipment_maintenance_logs_id_attachments_attachment_id_get(connection, procore_company_id, company_id, id, attachment_id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/rest/v1.0/companies/#{company_id}/managed_equipment_maintenance_logs/#{id}/attachments/#{attachment_id}")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %ProcoreV1API.Model.ManagedEquipmentMaintenanceLogsAttachment{}},
      {401, %ProcoreV1API.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response{}},
      {403, %ProcoreV1API.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response{}}
    ])
  end

  @doc """
  Bulk Delete Managed Equipment Maintenance Log Attachments
  Delete multiple Managed Equipment Maintenance Logs Attachments with one request.

  ### Parameters

  - `connection` (ProcoreV1API.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `company_id` (integer()): Unique identifier for the company.
  - `id` (integer()): Id of the Managed Equipment Maintenance Log
  - `rest_v10_companies_company_id_managed_equipment_maintenance_logs_id_attachments_bulk_destroy_delete_request` (RestV10CompaniesCompanyIdManagedEquipmentMaintenanceLogsIdAttachmentsBulkDestroyDeleteRequest): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%ManagedEquipmentMaintenanceLogsAttachment{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_companies_company_id_managed_equipment_maintenance_logs_id_attachments_bulk_destroy_delete(Tesla.Env.client, integer(), integer(), integer(), ProcoreV1API.Model.RestV10CompaniesCompanyIdManagedEquipmentMaintenanceLogsIdAttachmentsBulkDestroyDeleteRequest.t, keyword()) :: {:ok, list(ProcoreV1API.Model.ManagedEquipmentMaintenanceLogsAttachment.t)} | {:ok, ProcoreV1API.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t} | {:error, Tesla.Env.t}
  def rest_v10_companies_company_id_managed_equipment_maintenance_logs_id_attachments_bulk_destroy_delete(connection, procore_company_id, company_id, id, rest_v10_companies_company_id_managed_equipment_maintenance_logs_id_attachments_bulk_destroy_delete_request, _opts \\ []) do
    request =
      %{}
      |> method(:delete)
      |> url("/rest/v1.0/companies/#{company_id}/managed_equipment_maintenance_logs/#{id}/attachments/bulk_destroy")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_param(:body, :body, rest_v10_companies_company_id_managed_equipment_maintenance_logs_id_attachments_bulk_destroy_delete_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%ProcoreV1API.Model.ManagedEquipmentMaintenanceLogsAttachment{}]},
      {400, %ProcoreV1API.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response{}},
      {401, %ProcoreV1API.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response{}},
      {403, %ProcoreV1API.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response{}},
      {422, %ProcoreV1API.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response{}},
      {:default, %ProcoreV1API.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response{}}
    ])
  end

  @doc """
  List all maintenance logs attachment
  Return a list of all Maintenance Log attachments for the Maintenance Log the current user has access to.

  ### Parameters

  - `connection` (ProcoreV1API.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `company_id` (integer()): Unique identifier for the company.
  - `id` (integer()): ID
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%ManagedEquipmentMaintenanceLogsAttachment{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_companies_company_id_managed_equipment_maintenance_logs_id_attachments_get(Tesla.Env.client, integer(), integer(), integer(), keyword()) :: {:ok, list(ProcoreV1API.Model.ManagedEquipmentMaintenanceLogsAttachment.t)} | {:ok, ProcoreV1API.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t} | {:error, Tesla.Env.t}
  def rest_v10_companies_company_id_managed_equipment_maintenance_logs_id_attachments_get(connection, procore_company_id, company_id, id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/rest/v1.0/companies/#{company_id}/managed_equipment_maintenance_logs/#{id}/attachments")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%ProcoreV1API.Model.ManagedEquipmentMaintenanceLogsAttachment{}]},
      {401, %ProcoreV1API.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response{}},
      {403, %ProcoreV1API.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response{}}
    ])
  end

  @doc """
  Create maintenance log attachment.
  Create a new maintenance log attachment.

  ### Parameters

  - `connection` (ProcoreV1API.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `company_id` (integer()): Unique identifier for the company.
  - `id` (integer()): Id of the Managed Equipment Maintenance Log
  - `rest_v10_companies_company_id_managed_equipment_maintenance_logs_id_attachments_post_request` (RestV10CompaniesCompanyIdManagedEquipmentMaintenanceLogsIdAttachmentsPostRequest): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, ProcoreV1API.Model.ManagedEquipmentMaintenanceLogsAttachment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_companies_company_id_managed_equipment_maintenance_logs_id_attachments_post(Tesla.Env.client, integer(), integer(), integer(), ProcoreV1API.Model.RestV10CompaniesCompanyIdManagedEquipmentMaintenanceLogsIdAttachmentsPostRequest.t, keyword()) :: {:ok, ProcoreV1API.Model.ManagedEquipmentMaintenanceLogsAttachment.t} | {:ok, ProcoreV1API.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t} | {:error, Tesla.Env.t}
  def rest_v10_companies_company_id_managed_equipment_maintenance_logs_id_attachments_post(connection, procore_company_id, company_id, id, rest_v10_companies_company_id_managed_equipment_maintenance_logs_id_attachments_post_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/rest/v1.0/companies/#{company_id}/managed_equipment_maintenance_logs/#{id}/attachments")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_param(:body, :body, rest_v10_companies_company_id_managed_equipment_maintenance_logs_id_attachments_post_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {201, %ProcoreV1API.Model.ManagedEquipmentMaintenanceLogsAttachment{}},
      {400, %ProcoreV1API.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response{}},
      {401, %ProcoreV1API.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response{}},
      {403, %ProcoreV1API.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response{}}
    ])
  end
end
