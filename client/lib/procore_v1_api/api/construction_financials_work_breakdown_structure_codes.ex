# NOTE: This file is auto generated by OpenAPI Generator 6.6.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule ProcoreV1API.Api.ConstructionFinancialsWorkBreakdownStructureCodes do
  @moduledoc """
  API calls for all endpoints tagged `ConstructionFinancialsWorkBreakdownStructureCodes`.
  """

  alias ProcoreV1API.Connection
  import ProcoreV1API.RequestBuilder

  @doc """
  Bulk Create WBS codes
  Bulk Create WBS codes.

  ### Parameters

  - `connection` (ProcoreV1API.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `project_id` (integer()): Unique identifier for the project.
  - `wbs_code_bulk_create` (WbsCodeBulkCreate): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, ProcoreV1API.Model.RestV10ProjectsProjectIdWorkBreakdownStructureWbsCodesBulkCreatePatch201Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_projects_project_id_work_breakdown_structure_wbs_codes_bulk_create_patch(Tesla.Env.client, integer(), integer(), ProcoreV1API.Model.WbsCodeBulkCreate.t, keyword()) :: {:ok, ProcoreV1API.Model.RestV10ProjectsProjectIdWorkBreakdownStructureWbsCodesBulkCreatePatch201Response.t} | {:ok, ProcoreV1API.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t} | {:error, Tesla.Env.t}
  def rest_v10_projects_project_id_work_breakdown_structure_wbs_codes_bulk_create_patch(connection, procore_company_id, project_id, wbs_code_bulk_create, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/rest/v1.0/projects/#{project_id}/work_breakdown_structure/wbs_codes/bulk_create")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_param(:body, :body, wbs_code_bulk_create)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {201, %ProcoreV1API.Model.RestV10ProjectsProjectIdWorkBreakdownStructureWbsCodesBulkCreatePatch201Response{}},
      {400, %ProcoreV1API.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response{}},
      {401, %ProcoreV1API.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response{}},
      {403, %ProcoreV1API.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response{}},
      {404, %ProcoreV1API.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response{}}
    ])
  end

  @doc """
  List Project WBS codes
  All Work Breakdown Structure codes for a given project

  ### Parameters

  - `connection` (ProcoreV1API.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `project_id` (integer()): Unique identifier for the project.
  - `opts` (keyword): Optional parameters
    - `:can_select_divisions` (boolean()): If true, will include WBS Codes with division segment items. Default is true.
    - `:"filters[status][]"` ([String.t]): Filter results to only return codes with the included statuses. Options are 'active' or 'inactive'. Defaults to returning all results.
    - `:"filters[updated_at]"` (String.t): Filter results to only return codes that were updated within the range of the two specified ISO 8601 timestamps separated by the ... delimiter.
    - `:scope` (String.t): Filter results to only return codes that match the specified WBS scope.
    - `:page` (integer()): Page
    - `:per_page` (integer()): Elements per page

  ### Returns

  - `{:ok, [%RestV10ProjectsProjectIdWorkBreakdownStructureWbsCodesGet200ResponseInner{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_projects_project_id_work_breakdown_structure_wbs_codes_get(Tesla.Env.client, integer(), integer(), keyword()) :: {:ok, ProcoreV1API.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t} | {:ok, list(ProcoreV1API.Model.RestV10ProjectsProjectIdWorkBreakdownStructureWbsCodesGet200ResponseInner.t)} | {:error, Tesla.Env.t}
  def rest_v10_projects_project_id_work_breakdown_structure_wbs_codes_get(connection, procore_company_id, project_id, opts \\ []) do
    optional_params = %{
      :can_select_divisions => :query,
      :"filters[status][]" => :query,
      :"filters[updated_at]" => :query,
      :scope => :query,
      :page => :query,
      :per_page => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/rest/v1.0/projects/#{project_id}/work_breakdown_structure/wbs_codes")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%ProcoreV1API.Model.RestV10ProjectsProjectIdWorkBreakdownStructureWbsCodesGet200ResponseInner{}]},
      {400, %ProcoreV1API.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response{}},
      {401, %ProcoreV1API.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response{}},
      {403, %ProcoreV1API.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response{}},
      {404, %ProcoreV1API.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response{}}
    ])
  end

  @doc """
  Update a WBS code
  Update a WBS Code with new custom description or status.

  ### Parameters

  - `connection` (ProcoreV1API.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `project_id` (integer()): Unique identifier for the project.
  - `id` (integer()): WBS Code ID
  - `rest_v10_projects_project_id_work_breakdown_structure_wbs_codes_id_patch_request` (RestV10ProjectsProjectIdWorkBreakdownStructureWbsCodesIdPatchRequest): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, ProcoreV1API.Model.RestV10ProjectsProjectIdWorkBreakdownStructureWbsCodesGet200ResponseInner.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_projects_project_id_work_breakdown_structure_wbs_codes_id_patch(Tesla.Env.client, integer(), integer(), integer(), ProcoreV1API.Model.RestV10ProjectsProjectIdWorkBreakdownStructureWbsCodesIdPatchRequest.t, keyword()) :: {:ok, ProcoreV1API.Model.RestV10ProjectsProjectIdWorkBreakdownStructureWbsCodesGet200ResponseInner.t} | {:ok, ProcoreV1API.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t} | {:ok, ProcoreV1API.Model.RestV10WorkOrderContractsWorkOrderContractIdSubcontractorScheduleOfValuesStatusPatch404Response.t} | {:error, Tesla.Env.t}
  def rest_v10_projects_project_id_work_breakdown_structure_wbs_codes_id_patch(connection, procore_company_id, project_id, id, rest_v10_projects_project_id_work_breakdown_structure_wbs_codes_id_patch_request, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/rest/v1.0/projects/#{project_id}/work_breakdown_structure/wbs_codes/#{id}")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_param(:body, :body, rest_v10_projects_project_id_work_breakdown_structure_wbs_codes_id_patch_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %ProcoreV1API.Model.RestV10ProjectsProjectIdWorkBreakdownStructureWbsCodesGet200ResponseInner{}},
      {401, %ProcoreV1API.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response{}},
      {403, %ProcoreV1API.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response{}},
      {404, %ProcoreV1API.Model.RestV10WorkOrderContractsWorkOrderContractIdSubcontractorScheduleOfValuesStatusPatch404Response{}},
      {422, %ProcoreV1API.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response{}}
    ])
  end

  @doc """
  Create a WBS code
  Create a new WBS code.

  ### Parameters

  - `connection` (ProcoreV1API.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `project_id` (integer()): Unique identifier for the project.
  - `rest_v10_projects_project_id_work_breakdown_structure_wbs_codes_post_request` (RestV10ProjectsProjectIdWorkBreakdownStructureWbsCodesPostRequest): 
  - `opts` (keyword): Optional parameters
    - `:can_select_divisions` (boolean()): If true, will include WBS Codes with division segment items. Default is true.

  ### Returns

  - `{:ok, ProcoreV1API.Model.RestV10ProjectsProjectIdWorkBreakdownStructureWbsCodesGet200ResponseInner.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_projects_project_id_work_breakdown_structure_wbs_codes_post(Tesla.Env.client, integer(), integer(), ProcoreV1API.Model.RestV10ProjectsProjectIdWorkBreakdownStructureWbsCodesPostRequest.t, keyword()) :: {:ok, ProcoreV1API.Model.RestV10ProjectsProjectIdWorkBreakdownStructureWbsCodesGet200ResponseInner.t} | {:ok, ProcoreV1API.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t} | {:error, Tesla.Env.t}
  def rest_v10_projects_project_id_work_breakdown_structure_wbs_codes_post(connection, procore_company_id, project_id, rest_v10_projects_project_id_work_breakdown_structure_wbs_codes_post_request, opts \\ []) do
    optional_params = %{
      :can_select_divisions => :query
    }

    request =
      %{}
      |> method(:post)
      |> url("/rest/v1.0/projects/#{project_id}/work_breakdown_structure/wbs_codes")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_param(:body, :body, rest_v10_projects_project_id_work_breakdown_structure_wbs_codes_post_request)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {201, %ProcoreV1API.Model.RestV10ProjectsProjectIdWorkBreakdownStructureWbsCodesGet200ResponseInner{}},
      {400, %ProcoreV1API.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response{}},
      {401, %ProcoreV1API.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response{}},
      {403, %ProcoreV1API.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response{}},
      {404, %ProcoreV1API.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response{}}
    ])
  end

  @doc """
  Bulk update WBS codes
  Bulk update WBS Codes with the same status.

  ### Parameters

  - `connection` (ProcoreV1API.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `project_id` (integer()): Unique identifier for the project.
  - `rest_v10_projects_project_id_work_breakdown_structure_wbs_codes_update_all_patch_request` (RestV10ProjectsProjectIdWorkBreakdownStructureWbsCodesUpdateAllPatchRequest): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_projects_project_id_work_breakdown_structure_wbs_codes_update_all_patch(Tesla.Env.client, integer(), integer(), ProcoreV1API.Model.RestV10ProjectsProjectIdWorkBreakdownStructureWbsCodesUpdateAllPatchRequest.t, keyword()) :: {:ok, nil} | {:ok, ProcoreV1API.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t} | {:ok, ProcoreV1API.Model.RestV10WorkOrderContractsWorkOrderContractIdSubcontractorScheduleOfValuesStatusPatch404Response.t} | {:ok, ProcoreV1API.Model.RestV10CompanyConfigurationGet400Response.t} | {:error, Tesla.Env.t}
  def rest_v10_projects_project_id_work_breakdown_structure_wbs_codes_update_all_patch(connection, procore_company_id, project_id, rest_v10_projects_project_id_work_breakdown_structure_wbs_codes_update_all_patch_request, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/rest/v1.0/projects/#{project_id}/work_breakdown_structure/wbs_codes/update_all")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_param(:body, :body, rest_v10_projects_project_id_work_breakdown_structure_wbs_codes_update_all_patch_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {400, %ProcoreV1API.Model.RestV10CompanyConfigurationGet400Response{}},
      {401, %ProcoreV1API.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response{}},
      {403, %ProcoreV1API.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response{}},
      {404, %ProcoreV1API.Model.RestV10WorkOrderContractsWorkOrderContractIdSubcontractorScheduleOfValuesStatusPatch404Response{}}
    ])
  end
end
