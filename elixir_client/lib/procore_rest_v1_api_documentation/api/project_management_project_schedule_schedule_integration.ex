# NOTE: This file is auto generated by OpenAPI Generator 6.6.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule ProcoreRestV1APIDocumentation.Api.ProjectManagementProjectScheduleScheduleIntegration do
  @moduledoc """
  API calls for all endpoints tagged `ProjectManagementProjectScheduleScheduleIntegration`.
  """

  alias ProcoreRestV1APIDocumentation.Connection
  import ProcoreRestV1APIDocumentation.RequestBuilder

  @doc """
  Download schedule file
  Download the most recently uploaded schedule file.

  ### Parameters

  - `connection` (ProcoreRestV1APIDocumentation.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `project_id` (integer()): Unique identifier for the project.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_schedule_integration_download_get(Tesla.Env.client, integer(), integer(), keyword()) :: {:ok, nil} | {:ok, ProcoreRestV1APIDocumentation.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t} | {:error, Tesla.Env.t}
  def rest_v10_schedule_integration_download_get(connection, procore_company_id, project_id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/rest/v1.0/schedule_integration/download")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_param(:query, :project_id, project_id)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false},
      {401, %ProcoreRestV1APIDocumentation.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response{}},
      {403, %ProcoreRestV1APIDocumentation.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response{}},
      {404, %ProcoreRestV1APIDocumentation.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response{}},
      {:default, %ProcoreRestV1APIDocumentation.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response{}}
    ])
  end

  @doc """
  List Schedule Imports
  Return a list of schedule imports for this project, most recent first.

  ### Parameters

  - `connection` (ProcoreRestV1APIDocumentation.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `project_id` (integer()): Unique identifier for the project.
  - `opts` (keyword): Optional parameters
    - `:page` (integer()): Page
    - `:per_page` (integer()): Elements per page

  ### Returns

  - `{:ok, [%RestV10ScheduleIntegrationGet200ResponseInner{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_schedule_integration_get(Tesla.Env.client, integer(), integer(), keyword()) :: {:ok, ProcoreRestV1APIDocumentation.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t} | {:ok, list(ProcoreRestV1APIDocumentation.Model.RestV10ScheduleIntegrationGet200ResponseInner.t)} | {:error, Tesla.Env.t}
  def rest_v10_schedule_integration_get(connection, procore_company_id, project_id, opts \\ []) do
    optional_params = %{
      :page => :query,
      :per_page => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/rest/v1.0/schedule_integration")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_param(:query, :project_id, project_id)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%ProcoreRestV1APIDocumentation.Model.RestV10ScheduleIntegrationGet200ResponseInner{}]},
      {401, %ProcoreRestV1APIDocumentation.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response{}},
      {403, %ProcoreRestV1APIDocumentation.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response{}},
      {:default, %ProcoreRestV1APIDocumentation.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response{}}
    ])
  end

  @doc """
  Upload schedule file
  DEPRECATED: This endpoint is a duplicate of the `PUT` endpoint. It will be removed in a future version of the API. Use the `PUT` method instead.  Upload a schedule file.  #### Supported File Formats  | Type | Source                                                        | |------|---------------------------------------------------------------| | MPP  | Microsoft Project                                             | | MPX  | Microsoft Project, SureTrak                                   | | XER  | Primavera P6, Primavera Contractor                            | | PP   | Asta Powerproject, Asta Easyplan                              | | XML  | Formatted for Microsoft Project, e.g. Smartsheet, OpenProject | | XML  | Primavera PMXML                                               | | PPX  | Phoenix Project Manager                                       | | FTS  | FastTrack Schedule                                            | | POD  | ProjectLibre                                                  | | GAN  | GanttProject                                                  | | PEP  | TurboProject                                                  | | PRX  | Primavera P3                                                  | | STX  | Primavera SureTrak                                            | | CDPX | ConceptDraw PROJECT                                           | | CDPZ | ConceptDraw PROJECT                                           | | SP   | Synchro Scheduler                                             | | SEDF | USACE Standard Data Exchange Format                           | | ZIP  | Compressed file containing one of the supported file types    |

  ### Parameters

  - `connection` (ProcoreRestV1APIDocumentation.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `project_id` (integer()): Unique identifier for the project.
  - `schedule_integration` (ProcoreRestV1APIDocumentation.Model.ScheduleIntegration.t): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_schedule_integration_patch(Tesla.Env.client, integer(), integer(), ProcoreRestV1APIDocumentation.Model.ProcoreRestV1APIDocumentation.Model.ScheduleIntegration.t.t, keyword()) :: {:ok, nil} | {:ok, ProcoreRestV1APIDocumentation.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t} | {:error, Tesla.Env.t}
  def rest_v10_schedule_integration_patch(connection, procore_company_id, project_id, schedule_integration, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/rest/v1.0/schedule_integration")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_param(:query, :project_id, project_id)
      |> add_param(:form, :schedule_integration, schedule_integration)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false},
      {400, %ProcoreRestV1APIDocumentation.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response{}},
      {401, %ProcoreRestV1APIDocumentation.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response{}},
      {403, %ProcoreRestV1APIDocumentation.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response{}},
      {:default, %ProcoreRestV1APIDocumentation.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response{}}
    ])
  end

  @doc """
  Upload schedule file
  Upload a schedule file.  #### Supported File Formats  | Type | Source                                                        | |------|---------------------------------------------------------------| | MPP  | Microsoft Project                                             | | MPX  | Microsoft Project, SureTrak                                   | | XER  | Primavera P6, Primavera Contractor                            | | PP   | Asta Powerproject, Asta Easyplan                              | | XML  | Formatted for Microsoft Project, e.g. Smartsheet, OpenProject | | XML  | Primavera PMXML                                               | | PPX  | Phoenix Project Manager                                       | | FTS  | FastTrack Schedule                                            | | POD  | ProjectLibre                                                  | | GAN  | GanttProject                                                  | | PEP  | TurboProject                                                  | | PRX  | Primavera P3                                                  | | STX  | Primavera SureTrak                                            | | CDPX | ConceptDraw PROJECT                                           | | CDPZ | ConceptDraw PROJECT                                           | | SP   | Synchro Scheduler                                             | | SEDF | USACE Standard Data Exchange Format                           | | ZIP  | Compressed file containing one of the supported file types    |

  ### Parameters

  - `connection` (ProcoreRestV1APIDocumentation.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `project_id` (integer()): Unique identifier for the project.
  - `schedule_integration` (ProcoreRestV1APIDocumentation.Model.ScheduleIntegration.t): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_schedule_integration_put(Tesla.Env.client, integer(), integer(), ProcoreRestV1APIDocumentation.Model.ProcoreRestV1APIDocumentation.Model.ScheduleIntegration.t.t, keyword()) :: {:ok, nil} | {:ok, ProcoreRestV1APIDocumentation.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t} | {:error, Tesla.Env.t}
  def rest_v10_schedule_integration_put(connection, procore_company_id, project_id, schedule_integration, _opts \\ []) do
    request =
      %{}
      |> method(:put)
      |> url("/rest/v1.0/schedule_integration")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_param(:query, :project_id, project_id)
      |> add_param(:form, :schedule_integration, schedule_integration)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false},
      {400, %ProcoreRestV1APIDocumentation.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response{}},
      {401, %ProcoreRestV1APIDocumentation.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response{}},
      {403, %ProcoreRestV1APIDocumentation.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response{}},
      {:default, %ProcoreRestV1APIDocumentation.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response{}}
    ])
  end
end
