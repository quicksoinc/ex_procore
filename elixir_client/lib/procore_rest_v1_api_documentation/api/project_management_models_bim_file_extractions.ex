# NOTE: This file is auto generated by OpenAPI Generator 6.6.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule ProcoreRestV1APIDocumentation.Api.ProjectManagementModelsBIMFileExtractions do
  @moduledoc """
  API calls for all endpoints tagged `ProjectManagementModelsBIMFileExtractions`.
  """

  alias ProcoreRestV1APIDocumentation.Connection
  import ProcoreRestV1APIDocumentation.RequestBuilder

  @doc """
  List BIM File Extractions
  Return a list of all BIM File Extractions A BIM File Extraction can fail for several reasons. When it does, the errors attribute contains a list of errors encountered while processing the model. The following table lists the possible error codes and types.  #### Error Types  | Code | Type                   | |------|------------------------| | 1    | Undefined              | | 2    | NetworkErr             | | 3    | ServerErr              | | 4    | JsonParseErr           | | 5    | TokenExpiredErr        | | 6    | FileOpenErr            | | 7    | FileWriteErr           | | 8    | FileCompressionErr     | | 9    | FileUploadError        | | 10   | ModelReadErr           | | 11   | ModelFileSizeErr       | | 12   | ModelExportErr         | | 13   | ModelEmptyDBErr        | | 14   | ModelViewpointErr      | | 15   | ModelErr               | | 16   | InvalidStatusError     | | 17   | FileDecompressionErr   | | 18   | UnsupportedFileFormat  | | 19   | No3DGeometry           | | 20   | InvalidInputError      | | 21   | UnsupportedFileSource  | | 22   | ProgressCompleteError  | 

  ### Parameters

  - `connection` (ProcoreRestV1APIDocumentation.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `project_id` (integer()): Unique identifier for the project.
  - `opts` (keyword): Optional parameters
    - `:page` (integer()): Page
    - `:per_page` (integer()): Elements per page
    - `:"filters[id]"` ([integer()]): Return item(s) with the specified IDs.
    - `:"filters[status]"` (String.t): Filter item(s) with matching status
    - `:"filters[file_version_id]"` ([integer()]): Return item(s) with the specified file_version_id in bim_file_upload
    - `:"filters[document_upload_id]"` ([String.t]): Return item(s) with the specified document_upload_id in bim_file_upload

  ### Returns

  - `{:ok, [%BimFileExtraction{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_bim_file_extractions_get(Tesla.Env.client, integer(), integer(), keyword()) :: {:ok, ProcoreRestV1APIDocumentation.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t} | {:ok, list(ProcoreRestV1APIDocumentation.Model.BimFileExtraction.t)} | {:error, Tesla.Env.t}
  def rest_v10_bim_file_extractions_get(connection, procore_company_id, project_id, opts \\ []) do
    optional_params = %{
      :page => :query,
      :per_page => :query,
      :"filters[id]" => :query,
      :"filters[status]" => :query,
      :"filters[file_version_id]" => :query,
      :"filters[document_upload_id]" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/rest/v1.0/bim_file_extractions")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_param(:query, :project_id, project_id)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%ProcoreRestV1APIDocumentation.Model.BimFileExtraction{}]},
      {401, %ProcoreRestV1APIDocumentation.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response{}},
      {403, %ProcoreRestV1APIDocumentation.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response{}},
      {:default, %ProcoreRestV1APIDocumentation.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response{}}
    ])
  end

  @doc """
  Show BIM File Extraction
  Return a single BIM File Extraction

  ### Parameters

  - `connection` (ProcoreRestV1APIDocumentation.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `id` (integer()): ID
  - `project_id` (integer()): Unique identifier for the project.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, ProcoreRestV1APIDocumentation.Model.BimFileExtraction.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_bim_file_extractions_id_get(Tesla.Env.client, integer(), integer(), integer(), keyword()) :: {:ok, ProcoreRestV1APIDocumentation.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t} | {:ok, ProcoreRestV1APIDocumentation.Model.BimFileExtraction.t} | {:error, Tesla.Env.t}
  def rest_v10_bim_file_extractions_id_get(connection, procore_company_id, id, project_id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/rest/v1.0/bim_file_extractions/#{id}")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_param(:query, :project_id, project_id)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %ProcoreRestV1APIDocumentation.Model.BimFileExtraction{}},
      {401, %ProcoreRestV1APIDocumentation.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response{}},
      {403, %ProcoreRestV1APIDocumentation.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response{}},
      {404, %ProcoreRestV1APIDocumentation.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response{}},
      {:default, %ProcoreRestV1APIDocumentation.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response{}}
    ])
  end
end
