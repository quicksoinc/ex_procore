# NOTE: This file is auto generated by OpenAPI Generator 6.6.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule ProcoreRestV1APIDocumentation.Model.ArrayOfTodosErrorsInner do
  @moduledoc """
  
  """

  @derive [Poison.Encoder]
  defstruct [
    :id,
    :assignment,
    :color,
    :created_by,
    :description,
    :finish_datetime,
    :full_outline_path,
    :milestone,
    :name,
    :percentage,
    :private,
    :start_datetime,
    :task_name,
    :updated_at,
    :errors
  ]

  @type t :: %__MODULE__{
    :id => integer() | nil,
    :assignment => ProcoreRestV1APIDocumentation.Model.RestV10ProjectsProjectIdWorkLogsGet200ResponseInnerCreatedBy.t | nil,
    :color => String.t | nil,
    :created_by => ProcoreRestV1APIDocumentation.Model.RestV10ProjectsProjectIdWorkLogsGet200ResponseInnerCreatedBy.t | nil,
    :description => String.t | nil,
    :finish_datetime => DateTime.t | nil,
    :full_outline_path => String.t | nil,
    :milestone => boolean() | nil,
    :name => String.t | nil,
    :percentage => integer() | nil,
    :private => boolean() | nil,
    :start_datetime => DateTime.t | nil,
    :task_name => String.t | nil,
    :updated_at => DateTime.t | nil,
    :errors => ProcoreRestV1APIDocumentation.Model.RestV10WorkOrderContractsWorkOrderContractIdLineItemsSyncPatch200ResponseErrorsInnerAllOf1Errors.t | nil
  }
end

defimpl Poison.Decoder, for: ProcoreRestV1APIDocumentation.Model.ArrayOfTodosErrorsInner do
  import ProcoreRestV1APIDocumentation.Deserializer
  def decode(value, options) do
    value
    |> deserialize(:assignment, :struct, ProcoreRestV1APIDocumentation.Model.RestV10ProjectsProjectIdWorkLogsGet200ResponseInnerCreatedBy, options)
    |> deserialize(:created_by, :struct, ProcoreRestV1APIDocumentation.Model.RestV10ProjectsProjectIdWorkLogsGet200ResponseInnerCreatedBy, options)
    |> deserialize(:errors, :struct, ProcoreRestV1APIDocumentation.Model.RestV10WorkOrderContractsWorkOrderContractIdLineItemsSyncPatch200ResponseErrorsInnerAllOf1Errors, options)
  end
end

