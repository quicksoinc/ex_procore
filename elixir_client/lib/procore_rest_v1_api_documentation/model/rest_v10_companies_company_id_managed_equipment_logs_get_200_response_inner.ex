# NOTE: This file is auto generated by OpenAPI Generator 6.6.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule ProcoreRestV1APIDocumentation.Model.RestV10CompaniesCompanyIdManagedEquipmentLogsGet200ResponseInner do
  @moduledoc """
  Equipment Log
  """

  @derive [Poison.Encoder]
  defstruct [
    :id,
    :project_id,
    :managed_equipment_id,
    :onsite,
    :offsite,
    :updated_at,
    :created_at,
    :deleted_at,
    :created_by,
    :formatted_offsite,
    :formatted_onsite,
    :responsible_contractor,
    :inspection_date,
    :induction_checklist_list_id,
    :induction_number,
    :induction_status
  ]

  @type t :: %__MODULE__{
    :id => integer() | nil,
    :project_id => integer() | nil,
    :managed_equipment_id => integer() | nil,
    :onsite => Date.t | nil,
    :offsite => Date.t | nil,
    :updated_at => DateTime.t | nil,
    :created_at => DateTime.t | nil,
    :deleted_at => DateTime.t | nil,
    :created_by => ProcoreRestV1APIDocumentation.Model.RestV10ProjectsProjectIdWorkLogsGet200ResponseInnerCreatedBy.t | nil,
    :formatted_offsite => Date.t | nil,
    :formatted_onsite => Date.t | nil,
    :responsible_contractor => String.t | nil,
    :inspection_date => Date.t | nil,
    :induction_checklist_list_id => integer() | nil,
    :induction_number => String.t | nil,
    :induction_status => boolean() | nil
  }
end

defimpl Poison.Decoder, for: ProcoreRestV1APIDocumentation.Model.RestV10CompaniesCompanyIdManagedEquipmentLogsGet200ResponseInner do
  import ProcoreRestV1APIDocumentation.Deserializer
  def decode(value, options) do
    value
    |> deserialize(:onsite, :date, nil, options)
    |> deserialize(:offsite, :date, nil, options)
    |> deserialize(:created_by, :struct, ProcoreRestV1APIDocumentation.Model.RestV10ProjectsProjectIdWorkLogsGet200ResponseInnerCreatedBy, options)
    |> deserialize(:formatted_offsite, :date, nil, options)
    |> deserialize(:formatted_onsite, :date, nil, options)
    |> deserialize(:inspection_date, :date, nil, options)
  end
end

