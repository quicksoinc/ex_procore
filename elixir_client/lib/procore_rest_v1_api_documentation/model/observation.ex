# NOTE: This file is auto generated by OpenAPI Generator 6.6.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule ProcoreRestV1APIDocumentation.Model.Observation do
  @moduledoc """
  Item object
  """

  @derive [Poison.Encoder]
  defstruct [
    :assignee_id,
    :contributing_behavior_id,
    :contributing_condition_id,
    :checklist_item_id,
    :coordination_issue_id,
    :created_by_id,
    :description,
    :due_date,
    :hazard_id,
    :incident_action_id,
    :name,
    :personal,
    :priority,
    :status,
    :trade_id,
    :type_id,
    :distribution_member_ids,
    :location_id,
    :mt_location,
    :"custom_field_%{custom_field_definition_id}"
  ]

  @type t :: %__MODULE__{
    :assignee_id => integer() | nil,
    :contributing_behavior_id => integer() | nil,
    :contributing_condition_id => integer() | nil,
    :checklist_item_id => integer() | nil,
    :coordination_issue_id => integer() | nil,
    :created_by_id => integer() | nil,
    :description => String.t | nil,
    :due_date => Date.t | nil,
    :hazard_id => integer() | nil,
    :incident_action_id => integer() | nil,
    :name => String.t,
    :personal => boolean() | nil,
    :priority => String.t | nil,
    :status => String.t | nil,
    :trade_id => integer() | nil,
    :type_id => integer(),
    :distribution_member_ids => [integer()] | nil,
    :location_id => integer() | nil,
    :mt_location => [String.t] | nil,
    :"custom_field_%{custom_field_definition_id}" => ProcoreRestV1APIDocumentation.Model.IncidentWitnessStatementCreateParametersCustomFieldCustomFieldDefinitionId.t | nil
  }
end

defimpl Poison.Decoder, for: ProcoreRestV1APIDocumentation.Model.Observation do
  import ProcoreRestV1APIDocumentation.Deserializer
  def decode(value, options) do
    value
    |> deserialize(:due_date, :date, nil, options)
    |> deserialize(:"custom_field_%{custom_field_definition_id}", :struct, ProcoreRestV1APIDocumentation.Model.IncidentWitnessStatementCreateParametersCustomFieldCustomFieldDefinitionId, options)
  end
end

